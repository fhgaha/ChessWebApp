@model ChessWebApp.Board

<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
    form {
        justify-content: center;
    }

    .main_grid {
        grid-gap: 1em;
        
    }

    .board-and-numbers {
        display: grid;
        grid-template-areas: "ranks board-zone"
                             "empty-space-between-ranks-and-files files";
    }

    .ranks{
        
        display: grid;
        grid-template-rows: repeat(8, 1fr);
        align-content: center;
    }
    .empty-space-between-ranks-and-files{}
    .files {
        display: grid;
        grid-template-columns: repeat(8, 1fr);
    }

        .ranks h6, .files h6 {
            color: rgba(255, 255, 255, .5);
            margin: 0;
            padding: 0.3em;
            align-self: center;
            justify-self: center;
        }

    .board-zone {
        grid-template-columns: repeat(8, 1fr);
        grid-gap: 0px;
        max-width: 425px;
    }

    .board-cell {
        aspect-ratio: 1;
        opacity: 0.9;
    }

    .oneSquare{
        width: 100%;
        height: 100%;
    }

    .square-button {
        border: none;
        background-color: transparent;
        width: 100%;
        height: 100%;
        padding: 0;
        margin: 0;
    }

    .piece-img {
        padding: 0;
        width: 100%;
        height: 100%;
        vertical-align: inherit;
    }

    .container-left {
        justify-content: right;
    }

    .container-board {}

    .fen-zone{}
    .buttons-zone{}
    .debute-zone{}

    @@media screen and (min-width: 768px) {
        .main_grid {
            display: grid !important;
            grid-template-columns: max-content auto;
            grid-template-areas: "board-and-numbers buttons-zone"
                                 "fen-zone .";
        }

        .board-and-numbers{grid-area: board-and-numbers;}
        .fen-zone{grid-area: fen-zone;}
        .buttons-zone{grid-area: buttons-zone;}
        .debute-zone{grid-area: debute-zone;}

        .container-board {
            min-width: 50%;
        }
    }

    #fen-input{font-size: smaller;}

    #aaaaaaaaa {
        grid-template-columns: 
            minmax(
                calc(70vmin * var(--board-scale)), 
                calc(100vh * var(--board-scale) - calc(var(--site-header-height) + var(--site-header-margin)) - 3rem)) 
            var(--gauge-gap) minmax(240px, 400px);
        grid-template-rows: fit-content;
    }
</style>

@{ ViewData["Title"] = "Index";

    string[] squareImgNames = { "lightSquare.png", "darkSquare.png" };
    var squares = Model.BoardSquares;
}

<form>
    <div class="main_grid row d-grid">
        <div class="board-and-numbers p-0">
            <div class="ranks">
                <h6>1</h6>
                <h6>2</h6>
                <h6>3</h6>
                <h6>4</h6>
                <h6>5</h6>
                <h6>6</h6>
                <h6>7</h6>
                <h6>8</h6>
            </div>
            <div class="board-zone col g-0 d-grid">

                @for (int i = 0; i < squares.GetLength(0); i++)
                {
                    var rank = Global.BoardLength - i + " ";

                    @* <th class="rank-number">@rank</th>*@

                    @for (int j = 0; j < squares.GetLength(1); j++)
                    {
                        var squareColor = squares[i, j].SquareColor == SquareColor.Light
                            ? Global.WhiteSquareColor : Global.BlackSquareColor;

                        if (squares[i, j].IsValid)
                            squareColor = Global.GreenSquareColor;

                        if (squares[i, j].CurrentPiece is King king && king.IsUnderCheck)
                            squareColor = Global.RedSquareColor;

                        <div class="board-cell" style="background: @squareColor;">
                            <div class="oneSquare" id="@squares[i, j].Location.File@squares[i, j].Location.Rank">
                                <button class="square-button" name="location"
                                        value="@squares[i, j].Location.File@squares[i, j].Location.Rank"
                                        asp-controller="Home" asp-action="HandleButtonClick">
                                    @if (squares[i, j].IsOccupied)
                                    {
                                        var piece = squares[i, j].CurrentPiece;

                                        string pieceColor = piece.PieceColor == ChessWebApp.PieceColor.Light ? "white" : "black";
                                        string pieceClass = piece.GetType().Name;
                                        string fileType = ".png";

                                        <img class="piece-img" width="40" src="~/img/pieceImgs/@pieceColor@pieceClass@fileType" />
                                    }
                                </button>
                            </div>
                        </div>
                    }
                }

                <!--<tr>
        <th></th>-->
                @*ABCDEFGH*@
                <!--@foreach (var file in Enum.GetValues(typeof(File)))
            {
                <th class="file-letter">@file</th>
            }
        </tr>-->

            </div>
            <div class="empty-space-between-ranks-and-files"></div>
            <div class="files">
                <h6>A</h6>
                <h6>B</h6>
                <h6>C</h6>
                <h6>D</h6>
                <h6>E</h6>
                <h6>F</h6>
                <h6>G</h6>
                <h6>H</h6>
            </div>
        </div>

        <div class="col fen-zone p-0">
            <div class="input-group">
                <span class="input-group-text bg-dark text-white" id="basic-addon1">FEN</span>
                <input id="fen-input" type="text" class="form-control bg-dark text-white-50"
                       value="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"
                       placeholder="" aria-label="Username" aria-describedby="basic-addon1">
            </div>
        </div>

        <div class="col buttons-zone p-0">
            <button class="btn btn-secondary fw-bold text-white" asp-controller="Home" asp-action="RestartGame">
                Restart
            </button>
        </div>

        <div class="col debute-zone buttons-zone p-0">
            
        </div>
    </div>
</form>


<style>
    .modal-body {
        display: inline-flex;
    }

    .modal-content {
        margin: 10% auto;
        width: min-content;
        border-radius: 0;
    }

    .promotion-button {
        border: none;
        background-color: transparent;
        width: 70px;
        height: 70px;
        padding: 0;
        margin: 0;
    }
</style>

<!-- White Pieces Modal -->
<div class="modal" id="WhitePromotionModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
     aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">

                @{ //color is always white
                    string _fileType = ".png";

                    var pieces = new List<AbstractPiece>
                            {
                        new Queen(ChessWebApp.PieceColor.Light) { Location = new Location(File.A, 1)},
                        new Knight(ChessWebApp.PieceColor.Light) { Location = new Location(File.A, 1)},
                        new Rook(ChessWebApp.PieceColor.Light) { Location = new Location(File.A, 1)},
                        new Bishop(ChessWebApp.PieceColor.Light) { Location = new Location(File.A, 1)}
                    };

                    for (int i = 0; i < pieces.Count; i++)
                    {
                        string pieceClass = pieces[i].GetType().Name;
                        string color = pieces[i].PieceColor == PieceColor.Light ? "white" : "black";

                        <button id="@i" class="promotion-button" type="submit" name="location"
                                value="@pieceClass @color @pieces[i].Location.File @pieces[i].Location.Rank"
                                asp-controller="Home" asp-action="PromotePawn" data-bs-dismiss="modal">

                            <img class="piece-img" width="40" src="~/img/pieceImgs/@color@pieceClass@_fileType" />

                        </button>
                    }
                }
            </div>
        </div>
    </div>
</div>

<!-- Black Pieces Modal -->
<div class="modal" id="BlackPromotionModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
     aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">

                @{ //color is always white
                    pieces = new List<AbstractPiece>
                                            {
                        new Queen(ChessWebApp.PieceColor.Dark) { Location = new Location(File.A, 1)},
                        new Knight(ChessWebApp.PieceColor.Dark) { Location = new Location(File.A, 1)},
                        new Rook(ChessWebApp.PieceColor.Dark) { Location = new Location(File.A, 1)},
                        new Bishop(ChessWebApp.PieceColor.Dark) { Location = new Location(File.A, 1)}
                    };

                    for (int i = 0; i < pieces.Count; i++)
                    {
                        string pieceClass = pieces[i].GetType().Name;
                        string color = pieces[i].PieceColor == PieceColor.Light ? "white" : "black";

                        <button id="@i" class="promotion-button" type="submit" name="location"
                                value="@pieceClass @color @pieces[i].Location.File @pieces[i].Location.Rank"
                                asp-controller="Home" asp-action="PromotePawn" data-bs-dismiss="modal">

                            <img class="piece-img" width="40" src="~/img/pieceImgs/@color@pieceClass@_fileType" />

                        </button>
                    }
                }
            </div>
        </div>
    </div>
</div>

