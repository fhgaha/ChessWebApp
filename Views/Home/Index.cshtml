@model ChessWebApp.Board

<meta name="viewport" content="width=device-width, initial-scale=1">
<style>
    .board-zone {
        border-collapse: collapse;
    }

        .board-body{
        }

        .board-cell {
            position: relative;
            padding: 0;
        }

            .board-cell:after {
                content: '';
                display: block;
                margin-top: 100%;
            }

        .board-zone button {
            border: none;
            background-color: transparent;
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
        }

    .oneSquare {
        position: absolute;
        top: 0;
        bottom: 0;
        left: 0;
        right: 0;
    }

    img {
        padding: 0;
        width: 100%;
        height: 100%;
    }

    form {
        /*display: flex;*/
        justify-content: center;
    }

    .container-left {
        justify-content: right;
    }

    .container-board {
        min-width: 219px;
        max-width: 425px;
        /*max-height: 100vh;*/
        width: calc(100vh - 100px);
    }

    @@media screen and (min-width: 768px) {
        .container-board {
            min-width: 50%;
        }
    }

    .modal-body {
        display: inline-flex;
    }

    .modal-content {
        margin: 10% auto;
        width: min-content;
        border-radius: 0;
    }

    .promotion-button {
        border: none;
        background-color: transparent;
        width: 70px;
        height: 70px;
        padding: 0;
        margin: 0;
    }
</style>

@{ ViewData["Title"] = "Index";

    string[] squareImgNames = { "lightSquare.png", "darkSquare.png" };
    var squares = Model.BoardSquares;
}

<form>
    <div class="row d-grid d-md-flex">
        <div class="col container-board g-0 d-grid order-md-1">
            <div class="board-zone d-grid">
                <div class="board-body d-table">

                    @for (int i = 0; i < squares.GetLength(0); i++)
                    {
                        <div class="board-row d-table-row">

                            @{ var rank = Constants.BoardLength - i + " ";}

                          @*  <th class="rank-number">@rank</th>*@

                            @for (int j = 0; j < squares.GetLength(1); j++)
                            {
                                var squareColor = squares[i, j].SquareColor == SquareColor.Light ? Global.WhiteSquareColor : Global.BlackSquareColor;

                                if (squares[i, j].IsValid)
                                    squareColor = Global.GreenSquareColor;

                                if (squares[i, j].CurrentPiece is King king && king.IsUnderCheck)
                                    squareColor = Global.RedSquareColor;

                                <div class="board-cell d-table-cell" style="background: @squareColor; opacity: 0.9">
                                    <div class="oneSquare" id="@squares[i, j].Location.File@squares[i, j].Location.Rank">
                                        <button class="square-button" name="location"
                                                value="@squares[i, j].Location.File@squares[i, j].Location.Rank"
                                                asp-controller="Home" asp-action="HandleButtonClick">
                                            @if (squares[i, j].IsOccupied)
                                            {
                                                var piece = squares[i, j].CurrentPiece;

                                                string pieceColor = piece.PieceColor == ChessWebApp.PieceColor.Light ? "white" : "black";
                                                string pieceClass = piece.GetType().Name;
                                                string fileType = ".png";

                                                <img width="40" src="~/img/pieceImgs/@pieceColor@pieceClass@fileType" />
                                            }
                                        </button>
                                    </div>
                                </div>
                            }
                        </div>

                    }

                    <!--<tr>
                        <th></th>-->
                        @*ABCDEFGH*@
                        <!--@foreach (var file in Enum.GetValues(typeof(File)))
                        {
                            <th class="file-letter">@file</th>
                        }
                    </tr>-->

                </div>
            </div>
        </div>
        
        <div class="col px-0 py-3 px-md-3 py-md-0 order-md-0" align="right">
            <button class="btn btn-secondary fw-bold text-white" asp-controller="Home" asp-action="RestartGame">
            Restart</button>
        </div>

        <div class="col order-md-2">
        @*    <button id="theme-button" class="btn btn-secondary fw-bold text-white" onclick="toggle()">Theme</button>*@
        </div>
    </div>
</form>


<!-- White Pieces Modal -->
<div class="modal" id="WhitePromotionModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
     aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">

                @{ //color is always white
                    string _fileType = ".png";

                    var pieces = new List<AbstractPiece>
                            {
                        new Queen(ChessWebApp.PieceColor.Light) { Location = new Location(File.A, 1)},
                        new Knight(ChessWebApp.PieceColor.Light) { Location = new Location(File.A, 1)},
                        new Rook(ChessWebApp.PieceColor.Light) { Location = new Location(File.A, 1)},
                        new Bishop(ChessWebApp.PieceColor.Light) { Location = new Location(File.A, 1)}
                    };

                    for (int i = 0; i < pieces.Count; i++)
                    {
                        string pieceClass = pieces[i].GetType().Name;
                        string color = pieces[i].PieceColor == PieceColor.Light ? "white" : "black";

                        <button id="@i" class="promotion-button" type="submit" name="location"
                                value="@pieceClass @color @pieces[i].Location.File @pieces[i].Location.Rank"
                                asp-controller="Home" asp-action="PromotePawn" data-bs-dismiss="modal">

                            <img width="40" src="~/img/pieceImgs/@color@pieceClass@_fileType" />

                        </button>
                    }
                }
            </div>
        </div>
    </div>
</div>

<!-- Black Pieces Modal -->
<div class="modal" id="BlackPromotionModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
     aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body">

                @{ //color is always white
                    pieces = new List<AbstractPiece>
                                            {
                        new Queen(ChessWebApp.PieceColor.Dark) { Location = new Location(File.A, 1)},
                        new Knight(ChessWebApp.PieceColor.Dark) { Location = new Location(File.A, 1)},
                        new Rook(ChessWebApp.PieceColor.Dark) { Location = new Location(File.A, 1)},
                        new Bishop(ChessWebApp.PieceColor.Dark) { Location = new Location(File.A, 1)}
                    };

                    for (int i = 0; i < pieces.Count; i++)
                    {
                        string pieceClass = pieces[i].GetType().Name;
                        string color = pieces[i].PieceColor == PieceColor.Light ? "white" : "black";

                        <button id="@i" class="promotion-button" type="submit" name="location"
                                value="@pieceClass @color @pieces[i].Location.File @pieces[i].Location.Rank"
                                asp-controller="Home" asp-action="PromotePawn" data-bs-dismiss="modal">

                            <img width="40" src="~/img/pieceImgs/@color@pieceClass@_fileType" />

                        </button>
                    }
                }
            </div>
        </div>
    </div>
</div>

